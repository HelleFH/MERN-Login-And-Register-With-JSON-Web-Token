import React, { useState, useEffect } from 'react';
import Calendar from 'react-calendar';
import 'react-calendar/dist/Calendar.css';
import axios from 'axios';
import CreateEntryWithFileUpload from '../components/createEntry';

// Function to fetch entries by date and username
const getEntriesByDateAndUsername = async (date, username) => {
  try {
    const response = await axios.get(`http://localhost:3001/api/v1/entries/${date}?username=${username}`);
    return response.data;
  } catch (error) {
    if (error.response && error.response.status === 404) {
      // No entries found for the date and username, return an empty array
      return [];
    } else {
      throw error;
    }
  }
};

const CalendarComponent = () => {
  const [loggedIn, setLoggedIn] = useState(false);
  const [selectedDate, setSelectedDate] = useState(null); // Initially no date is selected
  const [entries, setEntries] = useState([]);
  const [error, setError] = useState(null);
  const [highlightedDates, setHighlightedDates] = useState([]);
  const [showCreateForm, setShowCreateForm] = useState(false); // State to manage the visibility of the create form

  useEffect(() => {
    // Check if the user is logged in by verifying the presence of JWT token in local storage
    const token = localStorage.getItem('auth');
    if (token) {
      setLoggedIn(true);
    } else {
      setLoggedIn(false);
    }
  }, []);

  useEffect(() => {
    // Fetch entries for the current selected date when component mounts
    if (selectedDate) {
      fetchEntries(selectedDate);
    }
  }, [selectedDate]);

  useEffect(() => {
    // Fetch and save entry dates to local storage
    const fetchAndSaveEntryDates = async () => {
      try {
        const username = localStorage.getItem('username');
        if (!username) return; // If username is not available, return
        
        const startDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1);
        const endDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 0);

        const datesInRange = [];
        const currentDate = new Date(startDate);
        while (currentDate <= endDate) {
          datesInRange.push(new Date(currentDate));
          currentDate.setDate(currentDate.getDate() + 1);
        }

        const highlightedDates = [];
        for (const date of datesInRange) {
          const formattedDate = date.toISOString().split('T')[0];
          const entriesData = await getEntriesByDateAndUsername(formattedDate, username);
          if (entriesData.length > 0) {
            highlightedDates.push(date.toDateString());
          }
        }

        setHighlightedDates(highlightedDates);
        localStorage.setItem('highlightedDates', JSON.stringify(highlightedDates));
      } catch (error) {
        console.error('Error occurred while fetching entries:', error);
        setError('An error occurred while fetching entries.');
      }
    };

    if (selectedDate) {
      fetchAndSaveEntryDates();
    }
  }, [selectedDate]);

  const fetchEntries = async (date) => {
    try {
      console.log('Fetching entries for date:', date); // Add this line for debugging
      // Call getEntriesByDateAndUsername function to fetch entries for the selected date and username
      const formattedDate = date.toISOString().split('T')[0];
      const username = localStorage.getItem('username');
      const entriesData = await getEntriesByDateAndUsername(formattedDate, username);
      setEntries(entriesData); // Update entries state with the fetched data
    } catch (error) {
      console.error('Error occurred while fetching entries:', error);
      setError('An error occurred while fetching entries.');
    }
  };
  
  console.log('Component rendered.'); // Add this line for debugging
  
  const handleDateChange = (date) => {
    if (selectedDate && selectedDate.getTime() === date.getTime()) {
      // If the same date is clicked again, deselect it
      setSelectedDate(null);
    } else {
      setSelectedDate(date);
    }
  };
  
  const tileClassName = ({ date }) => {
    // Format the date string generated by the calendar to match the format of dates stored in local storage
    const formattedDate = date.toDateString();
  
    // Check if the formatted date exists in the highlightedDates array
    return highlightedDates.includes(formattedDate) ? 'highlighted' : null;
  };

  const handleAddEntryClick = () => {
    setShowCreateForm(true);
  };

  return (
    <div>
      {loggedIn ? (
        <div>
          <h1>Calendar</h1>
          <Calendar
            value={selectedDate}
            onChange={handleDateChange}
            tileClassName={tileClassName}
          />
          {selectedDate && (
            <>
              <p>Selected Date: {selectedDate.toDateString()}</p>
              {error && <p>Error: {error}</p>}
              {/* Display entries here */}
              {entries.length > 0 ? (
              <ul>
              {entries.map((entry, index) => (
                <li key={index}>
                  <p>Name: {entry.name}</p>
                  <p>Notes: {entry.notes}</p>
                  <p>Sunlight: {entry.sunlight}</p>
                  <p>Watering: {entry.watering}</p>

                  {entry.cloudinaryUrl && (
                    <img src={entry.cloudinaryUrl} alt={entry.title} />
                  )}
                </li>
              ))}
            </ul>
              ) : (
                <p>No entries found for the selected date.</p>
              )}
              <button onClick={handleAddEntryClick}>Add Entry</button>
              {showCreateForm && <CreateEntryWithFileUpload selectedDate={selectedDate} />}
            </>
          )}
        </div>
      ) : (
        <p>Please log in to view the calendar.</p>
      )}
    </div>
  );
  
};

export default CalendarComponent;
