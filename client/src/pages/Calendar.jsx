import React, { useState, useEffect } from 'react';
import Calendar from 'react-calendar';
import 'react-calendar/dist/Calendar.css';
import CreateListingWithFileUpload from '../components/createListing';
import axios from 'axios';

// Function to fetch listings by date and username
const getListingsByDateAndUsername = async (date, username) => {
  try {
    const response = await axios.get(`http://localhost:3001/api/v1/listings/${date}?username=${username}`);
    return response.data;
  } catch (error) {
    // Check if the error is a 404 Not Found error
    if (error.response && error.response.status === 404) {
      // No listings found for the date and username, return an empty array
      return [];
    } else {
      // Other errors occurred, throw the error for the caller to handle
      throw error;
    }
  }
};

const CalendarComponent = () => {
  const [loggedIn, setLoggedIn] = useState(false);
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [listings, setListings] = useState([]);
  const [error, setError] = useState(null);
  const [highlightedDates, setHighlightedDates] = useState([]);

  useEffect(() => {
    // Check if the user is logged in by verifying the presence of JWT token in local storage
    const token = localStorage.getItem('auth');
    if (token) {
      setLoggedIn(true);
    } else {
      setLoggedIn(false);
    }
  }, []);

  useEffect(() => {
    // Fetch listings for the current selected date when component mounts
    fetchListings(selectedDate);
  }, [selectedDate]);

  useEffect(() => {
    // Fetch and save listing dates to local storage
    const fetchAndSaveListingDates = async () => {
      try {
        const username = localStorage.getItem('username');
        if (!username) return; // If username is not available, return
        
        const startDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1);
        const endDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 0);

        const datesInRange = [];
        const currentDate = new Date(startDate);
        while (currentDate <= endDate) {
          datesInRange.push(new Date(currentDate));
          currentDate.setDate(currentDate.getDate() + 1);
        }

        const highlightedDates = [];
        for (const date of datesInRange) {
          const formattedDate = date.toISOString().split('T')[0];
          const listingsData = await getListingsByDateAndUsername(formattedDate, username);
          if (listingsData.length > 0) {
            highlightedDates.push(date.toDateString());
          }
        }

        setHighlightedDates(highlightedDates);
        localStorage.setItem('highlightedDates', JSON.stringify(highlightedDates));
      } catch (error) {
        console.error('Error occurred while fetching listings:', error);
        setError('An error occurred while fetching listings.');
      }
    };

    fetchAndSaveListingDates();
  }, [selectedDate]);

  const fetchListings = async (date) => {
    try {
      // Call getListingsByDateAndUsername function to fetch listings for the selected date and username
      const formattedDate = date.toISOString().split('T')[0];
      const username = localStorage.getItem('username');
      const listingsData = await getListingsByDateAndUsername(formattedDate, username);
      setListings(listingsData); // Update listings state with the fetched data
    } catch (error) {
      console.error('Error occurred while fetching listings:', error);
      setError('An error occurred while fetching listings.');
    }
  };

  const handleDateChange = (date) => {
    setSelectedDate(date);
  };
  
  const tileClassName = ({ date }) => {
    // Format the date string generated by the calendar to match the format of dates stored in local storage
    const formattedDate = date.toDateString();
  
    // Check if the formatted date exists in the highlightedDates array
    return highlightedDates.includes(formattedDate) ? 'highlighted' : null;
  };

  return (
    <div>
      {loggedIn ? (
        <div>
          <h1>Calendar</h1>
          <Calendar
            value={selectedDate}
            onChange={handleDateChange}
            tileClassName={tileClassName}
          />
          <p>Selected Date: {selectedDate.toDateString()}</p>
          {error && <p>Error: {error}</p>}
          {/* Display listings here */}
          <ul>
            {listings.length > 0 ? (
              listings.map((listing, index) => (
                <li key={index}>{listing.title}</li>
              ))
            ) : (
              <p>No listings found for the selected date.</p>
            )}
          </ul>
          <CreateListingWithFileUpload selectedDate={selectedDate} />
        </div>
      ) : (
        <p>Please log in to view the calendar.</p>
      )}
    </div>
  );
};

export default CalendarComponent;
